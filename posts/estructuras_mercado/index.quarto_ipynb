{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Estructuras de Mercado con Python\"\n",
        "subtitle: \"Competencia Perfecta, Monopolio y Oligopolio\"\n",
        "author: \"Juan Isaula\"\n",
        "date: \"2023-04-13\"\n",
        "categories: [CMg, CVP, CTP, Python]\n",
        "image: \"estruct_mercd.jpeg\"\n",
        "---\n",
        "\n",
        "\n",
        "Este post tiene como objetivo dar a conocer la importancia del `software` de `Python` en el ambito microeconomico, particularmente en este caso hablamos de las diferentes `estructuras de mercado`; `competencia perfecta`, `monopolio` y `oligopolio`.\n",
        "\n",
        "### Qué aprenderá\n",
        "\n",
        "-   El comportamiento de la industria en el **corto plazo** y en el **largo plazo**\n",
        "\n",
        "-   **Curva de oferta de la industria** a corto plazo y largo plazo\n",
        "\n",
        "# Competencia Perfecta\n",
        "\n",
        "Un **productor precio-aceptante** es aquel cuyas acciones no tienen efecto sobre el precio de mercado del bien que vende\n",
        "\n",
        "Un **consumidor precio-aceptante** es aquel cuyas acciones no tienen efecto sobre el precio de mercado del bien que compra.\n",
        "\n",
        "Un **mercado perfectamente competitivo** es quel en el cual todos los participantes son precio-aceptantes.\n",
        "\n",
        "Una **industria perfectamente competitiva** es aquella en la cual los productores son precio-aceptantes.\n",
        "\n",
        "## Condiciones necesaria para la competencia perfecta\n",
        "\n",
        "-   Muchos productores, ninguno de los cuales tiene una gran cuota de mercado.\n",
        "\n",
        "-   Una industria puede ser perfectamente competitiva sólo si los consumidores consideran como equivalentes a los productos de todos los productores (**producto homogéneo**)\n",
        "\n",
        "## Libre entrada y salida\n",
        "\n",
        "Existe **libre entrada y salida en una industria** cuando nuevos productores pueden entrar facilmente en esa industria a los que ya estan en ella pueden abondonarla sin coste alguno.\n",
        "\n",
        "### Regla de Producción Optima\n",
        "\n",
        "La **regla de producción optima** dice que el beneficio se maximiza cuando se produce la cantidad de output para la cual el ingreso marginal de la última unidad de output producida es igual a su coste marginal.\n",
        "\n",
        "$$\n",
        "IMg = CMg\n",
        "$$\n",
        "\n",
        "### Función de Benenficios\n",
        "\n",
        "La función de beneficios $(\\pi)$ representa las diferencias entre los costos totales, $C(Q)$ e ingresos totales,$R(Q)$ , de las empresas\n",
        "\n",
        "$$\n",
        "\\pi = R(Q) - C(Q)\n",
        "$$\n",
        "\n",
        "### Tomador de Precios\n",
        "\n",
        "Precio igual al costo marginal\n",
        "\n",
        "$$\n",
        "\\begin{eqnarray*}\n",
        "CMg = IMg = P\n",
        "\\end{eqnarray*}\n",
        "$$\n",
        "\n",
        "Por tanto, se dice que el beneficio de una empresa precio-aceptante se maximiza produciendo la cantidad de output para la cual el costo marginal de la última unidad producida es igual al precio de mercado, tal como se aprecia en el siguiente gráfico\n",
        "\n",
        "![Cantidad de producto que maximiza el beneficio de una empresa precio-aceptante](equilibrio.jpeg)\n",
        "\n",
        "## Costes y Producción en el Corto Plazo\n",
        "\n",
        "En el corto plazo tenemos las siguientes condiciones de producción de empresas competitivas\n",
        "\n",
        "| Condiciones      |  Resultados                                                                                                                                                                                                                      |\n",
        "|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n",
        "| P \\> CVMe mínimo | La empresa produce en el corto plazo. Si P \\< CTMe mínimo, la empresa cubre sus costos variables y parte de sus costes fijos pero no todos. Si P \\> CTMe mínimo, la empresa cubre todos sus costes variables y sus costes fijos. |\n",
        "| P = CVMe mínimo  | La empresa es indiferente entre producir en el corto plazo o no producir. Cubre exactamente sus costes variables.                                                                                                                |\n",
        "| P \\< CVMe mínimo | La empresa cierra en el corto plazo. No cubre sus costes variables.                                                                                                                                                              |\n",
        "\n",
        "## Ejemplo \\# 1- Corto Plazo \n",
        "\n",
        "Primero resolveremos el siguiente ejercicio de manera manual y posteriormente lo resolveremos en Python.\n",
        "\n",
        "Suponga que la empresa tiene una curva de costos de corto plazo dada por\n",
        "\n",
        "$$\n",
        "C(Q) = 100 + 20Q + Q^2\n",
        "$$\n",
        "\n",
        "-   ¿Cuál es la ecuación para el costo variable Medio?\n",
        "\n",
        "-   ¿Cuál es el valor mínimo para el costo variable promedio?\n",
        "\n",
        "-   ¿Cuál es la curva de oferta de corto plazo?\n",
        "\n",
        "***Solución***\n",
        "\n",
        "-   Dada la función de costo $C(Q) = 100 + 20Q + Q^2$ es claro que el costo variable, CV, esta dado por $$CV = 20Q + Q^2$$ por tanto su costo variable promedio es $$CVMe = \\frac{CV}{Q} = 20 + Q$$\n",
        "\n",
        "-   Ahora bien, su costo marginal sabemos que unicamente requiere aplicar la regla de diferenciación, ya que $$CMg = \\frac{\\partial C(Q)}{\\partial Q} = 20 + 2Q$$\n",
        "\n",
        "-   Si queremos encontrar el costo variable promedio mínimo, $$CVMe_{\\min}$$, se obtiene como $$CMg = CVMe \\longrightarrow Q = \\fbox{0}$$\n",
        "\n",
        "-   Entonces la función de oferta es: $$\\begin{eqnarray*}CMg &=& p\\\\[0.2cm] 20 + 2Q &=& P\\\\[0.2cm] Q(P) &=& \\frac{P}{2} - 10 \\end{eqnarray*}$$\n",
        "\n",
        "Por tanto, también podemos obtener el precio de equilibrio, ya que $$0 = \\frac{P}{2} - 10 \\longrightarrow P = \\fbox{20}$$\n",
        "\n",
        "Ahora, encontremos estos resultados en Python:\n"
      ],
      "id": "d8a766f6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Paquete previo \n",
        "from sympy import *\n",
        "Q = symbols(\"Q\")\n",
        "\n",
        "\n",
        "# función de costo de corto plazo \n",
        "CT = 100 + 20*Q + Q**2\n",
        "# costo variale promedio \n",
        "CV = 20 + Q \n",
        "# Encontrar el costo variable minimo \n",
        "# Primero: costo marginal\n",
        "\n",
        "CM = diff(CT,Q)"
      ],
      "id": "fe8c9852",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# igualar costo marginal y costo variable promedio \n",
        "solve(Eq(CM,CV))"
      ],
      "id": "a9e2c048",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "cantidad = solve(Eq(CM,CV))\n",
        "cantidad[0]"
      ],
      "id": "1ee34808",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "P = CV.subs({Q:cantidad[0]})\n",
        "P"
      ],
      "id": "743a0302",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "plot(CT, CT/Q, CV, CM, (Q,0,100), xlim = (0, 100), ylim = (0,100), xlabel = \"Q\", ylabel = \"P\")"
      ],
      "id": "308c1f16",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Puedes notar lo rápido y fácil que resulta realizar estos procedimientos con Python y la utilidad que puede brindarte en caso de que trabajes con volumnes de datos.\n",
        "\n",
        "### Ejemplo \\# 2 - Corto Plazo\n",
        "\n",
        "Ahora suponga que la empresa tiene una curva costos en el corto plazo de la siguiente forma:\n",
        "\n",
        "$$\n",
        "C(Q) = 1 + 10Q + Q^2\n",
        "$$\n",
        "\n",
        "Si la empresa opera en un mercado perfectamente competitivo, donde $P = 12$, ¿Cuál será los beneficios de la empresa en el corto plazo?\n",
        "\n",
        "***Solución***\n",
        "\n",
        "Sabemos que la función de beneficios esta dada por\n",
        "\n",
        "$$\n",
        "\\pi = R - C\n",
        "$$\n",
        "\n",
        "entonces,\n",
        "\n",
        "$$\n",
        "\\frac{\\partial \\pi}{\\partial Q} = IMg - CMg = 0\n",
        "$$\n",
        "\n",
        "así pues,\n",
        "\n",
        "$$\n",
        "CMg = 10 + 2Q \\hspace{1cm}y\\hspace{1cm} IMg = P \n",
        "$$\n",
        "\n",
        "por tanto,\n",
        "\n",
        "$$\n",
        "\\begin{eqnarray*}\n",
        "CMg &=& IMg\\\\[0.2cm]\n",
        "10 + 2Q &=& P\\\\[0.2cm]\n",
        "Q &=& \\frac{P}{2} - 5\\\\[0.2cm]\n",
        "Q &=& \\frac{12}{2} - 5, \\hspace{2cm}\\mbox{ya que P = 12}\\\\[0.2cm]\n",
        "Q &=& \\fbox{1}\n",
        "\\end{eqnarray*}\n",
        "$$\n",
        "\n",
        "entonces,\n",
        "\n",
        "$$\n",
        "\\pi = 12 - (1 + 10 +1) = \\fbox{0}\n",
        "$$\n",
        "\n",
        "Ahora veamos esta solución en Python:\n"
      ],
      "id": "dc702a4f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Función de costos a corto plazo \n",
        "Q = symbols(\"Q\")\n",
        "CT = Q**2 + 10*Q + 1\n",
        "P = 12\n",
        "R = P*Q\n",
        "# costo marginal\n",
        "CM = diff(CT,Q)\n",
        "CM\n",
        "IM = diff(R,Q)\n",
        "IM\n",
        "cantidad = solve(Eq(IM,CM))\n",
        "print(\"El valor de la producción que garantiza un equilibrio será:\", cantidad[0])"
      ],
      "id": "157441c1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Este resultado lo que nos dice es que la empresa oferta una unidad de producción $Q = 1$.\n"
      ],
      "id": "a0835473"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# Beneficio = IT - CT\n",
        "costo = CT.subs({Q:cantidad[0]})\n",
        "costo"
      ],
      "id": "ace3f947",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "ingreso = R.subs({Q:cantidad[0]})\n",
        "ingreso "
      ],
      "id": "bea8f763",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "Beneficios = R - CT\n",
        "pi = Beneficios.subs({Q:cantidad[0]})\n",
        "pi"
      ],
      "id": "feb29b82",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "plot(CT,CM,CT/Q,(Q,0,60), xlim=(0,5), ylim=(0,30), xlabel='Q', ylabel='CT,CM')"
      ],
      "id": "726411d8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Recuerde que todo este análisis se realizo para un mercado en competencia perfecta a corto plazo.\n",
        "\n",
        "`Pronto actualizare para el mercado en competencia perfecta a largo plazo, monopolio, e introducirnos un poco a la teoria de juegos.`"
      ],
      "id": "901ff39a"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/juanisaulamejia/opt/anaconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}