---
title: "Deep Learning"
subtitle: "PyTorch"
author: "Juan Isaula"
date: "2025-07-01"
categories: [Python, PyTorch]
image: "fondo.webp"
---

El Deep Learning está en todas partes, desde las cámaras de los smartphones hasta los asistentes de vos o los vehículos autónomos. En este curso, descubriras esta potente tecnología y aprenderás a aprovecharla con `PyTorch`, una de las bibliotecas de aprendizaje profundo más populares. Al finalizar tu recorrido por este documento, serás capaz de aprovechar PyTorch para resolver problemas de clasificación y regresión utilizando el aprendizaje profundo.

# Introducción a PyTorch (biblioteca de Deep Learning)

Antes de comenzar a crear modelos complejos, te haré conocer PyTorch, un librería de aprendizaje profundo. Aprenderás a manipular tensores, crear estructuras de datos de PyTorch y construir tu primera red neuronal en PyTorch con capas lineales.

El Deep Learning impulsa muchas innovaciones recientes y emocionantes, tales como la *traducción de idiomas*, *coches autónomos*, *diagnósticos médicos y chatbots.*

![](img/fig1.png){fig-align="center" width="600"}

## Qué es Deep Learning?

![](img/fig2.png){fig-align="center" width="200"}

Deep Learning (aprendizaje profundo) es un subconjunto del aprendizaje automático (machine learning). La estructura del modelo es una red de entradas (input), capas ocultas (hidden layers) y salidas (output), como se muestra en la siguiente imagen:

![](img/fig3.png){fig-align="center" width="200"}

Como apreciamos en la figura, una red puede tener una o muchas capas ocultas

![](img/fig4.png){fig-align="center" width="250"}

La intuición original detrás del aprendizaje profundo era crear modelos inspirados en el cerebro humano, sobre todo por cómo aprende el cerebro humano: a través de células interconectadas llamadas neuronas. Es por esto que llamamos a los modelos de aprendizaje profundo **`Redes Neuronales`**.

![](img/fig5.png){fig-align="center" width="150"}

Estas estructuras de modelos en capas requieren muchos más datos en comparación con otros modelos de aprendizaje automático para derivar patrones. Generalmente hablamos de al menos cientos de miles de puntos de datos.

## PyTorch: un framework del deep learning

![](img/fig6.png){fig-align="center" width="180"}

Si bien existen varios framework y paquetes para implementar el aprendizaje profundo en cuanto a algoritmos, nos centraremos en PyTorch, uno de los frameworks más populares y mejor mantenidos. *PyTorch fue desarrollado originalmente por Meta IA como parte del laboratorio de investigación de inteligencia artificial de Facebook antes de que pasara a depender de la fundación Linux.*

Está diseñado para ser intuitivo y fácil de usar, compartiendo muchas similitudes con la biblioteca de Python NumPy.

#### PyTorch Tensors

Podemos importar el módulo PyTorch llamando a

```{python}
import torch
```

-   La estructura de datos fundamental en PyTorch es un tensor, que es similar a una matriz.

-   Puede soportar muchas operaciones matemáticas y constituye un componente básico para nuestras redes neuronales.

-   Se pueden crear tensores a partir de listas de Python o matrices NumPy utilizando la clase `torch.tensor()` esta clase convierte los datos a un formato compatible para el aprendizaje profundo.

```{python}
mi_lista = [[1,2,3], [4,5,6]]
tensor = torch.tensor(mi_lista)
print(tensor)
```

### Atributos de los Tensores

Podemos llamar a `tensor.shape` para mostrar la forma de nuestro objeto recién creado.

```{python}
print(tensor.shape)
```

Y `tensor.dtype()` para mostrar su tipo de datos, aquí un entero de 64 bits.

```{python}
print(tensor.dtype)
```

Verificar la forma y el tipo de datos garantiza que los tensores se alineen correctamente con nuestro modelo y tarea, y puede ayudarnos en caso de depuración.

#### Operaciones con Tensores

Se pueden sumar o restar tensores de PyTorch, siempre que sus formas sean compatibles.

```{python}
a = torch.tensor([[1,1], [2,2]])
b = torch.tensor([[2,2],[3,3]])
c = torch.tensor([[2,2,2], [3,3,5]])
```

```{python}
print(a + b)
```

Cuando las dimensiones no son compatibles, obtendremos un error.

También podemos realizar la multiplicación por elemento, lo que implica multiplicar cada elemento correspondiente.

```{python}
print(a*b)
```

También esta incluida la multiplicación de matrices, que no es más que uno forma de combinar dos matrices para crear una nueva.

```{python}
print(a @ b)
```

Detras de escena, los modelos de aprendizaje profundo realizan innumerables operaciones como la suma y multiplicación para procesar datos y aprender patrones.

## Redes Neuronales y Capas

Vamos a contruir nuestra primer red neuronal usando tensores de PyTorch.

Una red neuronal consta de capas de entrada, ocultas y de salida.

![](img/fig7.png){fig-align="center" width="200"}

La **capa de entrada** contiene las características del conjunto de datos,

![](img/fig8.png){fig-align="center" width="200"}

La **capa de salida** contiene las predicciones,

![](img/fig9.png){fig-align="center" width="200"}

Y hay **capas ocultas (hidden layers)** en el medio

![](img/fig10.png){fig-align="center" width="200"}

Si bien una red puede tener cualquier cantidad de capas ocultas, comenzaremos construyendo una red sin capas ocultas donde la capa de salida es una capa lineal.

![](img/fig11.png){fig-align="center" width="200"}

-   Aquí, cada neurona de entrada se conecta a cada neurona de salida, lo que se denomina una red "totalmente conectada".

-   Esta red es equivalente a un modelo lineal y nos ayuda a comprender los fundamentos antes de agregar complejidad.

Usaremos el módulo `torch.nn` para construir nuestras redes. Esto hace que el código de la red sea más conciso y flexible y se importa convencionalmente como `nn`.

```{python}
import torch.nn as nn
```

Al diseñar una red neuronal, las dimensiones de las capas de entrada y salida están predefinidas.

-   La cantidad de neuronas en la capa de entrada es la cantidad de características en nuestro conjunto de datos.

-   Y el número de neuronas en la capa de salida es el número de clases que queremos predecir.

Digamos que creamos un input_tensor con forma de $1\times 3$.

```{python}
import torch
import torch.nn as nn
input_tensor = torch.tensor(
  [[0.3471, 0.4547, -0.2356]]
)
```

Podemos pensar en esto como una fila con tres *"carectísticas"* o *"neuronas"* .

A continuación, pasamos este input_tensor a una capa lineal, que aplica una función lineal para realizar predicciones.

![](img/fig12.png){fig-align="center" width="100"}

Para ello usaremos `nn.Linear()` toma dos argumentos: `int_features` es el número de características en nuestra entrada ( en este caso, tres) y `out_features` es el tamaño del tensor de salida (en este caso, dos).

![](img/fig13.png){fig-align="center" width="100"}

```{python}
linear_layer = nn.Linear(
  in_features = 3,
  out_features = 2
)
```

Especificar correctamente `in_features` garantiza que nuestra capa lineal pueda recibir el input_tensor.

Por último, pasamos input_tensor a linear_layer para generar una salida.

```{python}
output = linear_layer(input_tensor)
print(output)
```

Tenga en cuenta que esta salida tiene dos características o neuronas debido a las `out_features` especificadas en nuestra capa lineal.

Cuando input_tensor se pasa a linear_layer, se realiza una operación lineal para incluir pesos y sesgos.

![](img/fig14.png){fig-align="center" width="500"}

## Pesos (weights) y Sesgos (biases) 

Cada capa lineal tiene un conjunto de pesos y sesgos asociados. Estas son las cantidades clave que definen una neurona.

```{python}
print(linear_layer.weight)
```

```{python}
print(linear_layer.bias)
```

-   Los pesos reflejan la importancia de diferentes características.

-   El sesgos es un término adicional que es independiente de los pesos, y proporciona a las neurona una salida de referencia.

Al principio, la capa lineal asigna pesos y sesgos aleatorios; estos se ajustan posteriormente.

Imaginemos nuestra red totalmente conectada en acción.

Digamos que tenemos un conjunto de datos meteorológicos con tres características: *temperatura (temperature), humedad (humidity) y viento (wind).* Y queremos predecir si *lloverá (rain) o estará nublado (cloudy).*

1.  La característica humeda tendrá un peso más significativo en comparación a las demás características, ya que es un fuerte predictor de lluvia y nubes.

2.  Los datos meteorológicos corresponden a una región tropical con alta probabilidad de lluvia, por lo que agrega un sesgo para tener en cuenta esta información de referencia.

Con esta información, nuestro modelo hace una predicción.

## Capaz y Parámetros Ocultos

Hasta ahora, hemos utilizado una capa de entrada y una capa de lineal. Ahora, agregaremos más capas para ayudar a la red a aprender patrones complejos.

### Apilamiento de capaz con nn.Sequential()

Apilaremos tres capas lineales usando `nn.Sequential()`, un contenedor de PyTorch para apilar capas en secuencia. Esta red toma la entrada, la pasa a cada capa lineal en secuencia y devuelve la salida.

```{bash}
model = nn.Sequential(
  nn.Linear(n_features, 8),
  nn.Linear(8, 4),
  nn.Linear(4, n_classes)
)
```

-   En este caso, las capas dentro de `nn.Sequential()` son capas ocultas.

-   `n_features` representa el número de características de entrada y `n_classes` representa el número de clases de salida, ambas definidas por el conjunto de datos.

### Adición de capas 

Podemos añadir tantas capas ocultas como queramos.

![](img/fig17.png){width="450"}

La dimensión de cada capa coincide con la dimensión de salida de la anterior.

```{python}
model = nn.Sequential(
  nn.Linear(10, 18),
  nn.Linear(18, 20),
  nn.Linear(20, 5)
)
```

En nuestro ejemplo de tres capas, la primera capa toma 10 características y genera 18. La segunda toda 18 y genera 20. Finalmente, la tercera toma 20 y genera 5.

### Las capas están hechas de neuronas

![](img/fig18.png){fig-align="center" width="200"}

Una capa está completamente conectada cuando cada neurona se vincula a todas las neuronas de la capa anterior, como se muestra en rojo en la figura.

Cada neurona es una capa lineal:

-   realiza una operación lineal utilizando todas las neuonras de la capa anterior.

-   Por tanto, una sola neurona tiene $N+1$ parámetros que se puede aprender, siendo la dimensión de salida la capa anterior, más 1 para el sesgo.

### Parámetros y Capacidad del Modelo

Aumetar el número de capas ocultas aumenta el número total de parámetros en el modelo, también conocido como capacidad del modelo. Los modelos de mayor capacidad pueden manejar conjuntos de datos más complejos, pero su entrenamiento puede llevar más tiempo.

Una forma eficaz de evaluar la capacidad de un modelo es calcular su número total de parámetros.

Vamos a desglosarlo con una red de dos capas,

```{python}
model = nn.Sequential(
  nn.Linear(8, 4),
  nn.Linear(4, 2)
)
```

-   **La primera capa** tiene 4 neuronas, cada neurona tiene 8 pesos y un sesgo, lo que da como resultado 36 parámetros.

-   La segunda capa tiene 2 neuronas, cada neurona tiene 4 pesos y un sesgo, para un total de 10 parámetros.

-   Sumándolos todos, este modelo tiene 46 parámetros que se pueden aprender en total

También podemos calcular esto en PyTorch usando el método `.numel()`. Este método devuelve el número de elementos de un tensor.

```{python}
total = 0
for parameter in model.parameters():
  total += parameter.numel()
  
print(total)
```

### Balance entre complejidad y eficiencia

![](img/fig19.png){fig-align="center" width="400"}

Comprender el recuento de parámetros nos ayuda a equilibrar la complejidad y la eficiencia del modelo. Demasiados parámetros pueden dar lugar a tiempos de entrenamiento largos o sobreajuste, mientras que muy pocos pueden limitar la capacidad de aprendizaje.

# Hiperparámetros y arquitectura de redes neuronales 

Para entrenar una red neuronal en PyTorch, primero tendremos que entender componentes adicionales, como las funciones de activación y pérdida. Entonces nos daremos cuenta de que entrenar una red requiere reducir mínimo esa función de pérdida, lo que se hace calculando gradientes. Aprenderemos a utilizar estos gradientes para actualizar los parámetros de tu modelo.

## Funciones de Activación 

Hasta ahora hemos visto redes neuronales formadas únicamente por capas lineales.

![](img/fig20.png){fig-align="center" width="250"}

Podemos agregar **no linealidad** a nuestros modelos usando funciones de activación. Discutiremos dos funciones de activación:

-   **Sigmoid** para clasificación binaria y,

-   **Softmax** para clasificación multiclase.

Esta no linealidad permite que las redes aprendan cosas más complejas, interacciones entre entradas y objetivos que son relaciones **no linealeales.**

Llamaremos a la salida de la última capa lineal la **"pre-activación".** Salida, que pasaremos a funciones de activación para obtener la salida transformada.

### Función Sigmoid

La función de activación sigmoidea se utiliza ampliamente para problemas de clasificación binaria. Digamos que estamos tratando de clasificar un animal como mamífero o no?. Tenemos tres datos: el número de extremidades, si pone huevos y si tiene pelo. Las dos últimas son variables binarias: 1 si es si, 0 si no.

![](img/fig21.png){width="700"}

Pasar la entrada a un modelo con dos capas lineales devuelve una única salida: el número 6, tal como apreciamos en la siguiente figura:

![](img/fig22.png){fig-align="center" width="700"}

Este número aún no es interpretable. **Tenemos que pasar el número 6 por la función sigmoide**, transformandolo en un rango que represente la probabilidad entre cero y uno.

![](img/fig23.png){fig-align="center" width="700"}

Si el resultado está más cerca de uno (mayor que 0.5), lo etiquetamos como clase uno (mamífero). Si fuese menor que 0.5 la predección sería cero (no un mamifero).

![](img/fig24.png){fig-align="center" width="700"}

Ahora, implementemos sigmoide en PyTorch.

```{python}
import torch
import torch.nn as nn

input_tensor = torch.tensor([[6]])
sigmoid = nn.Sigmoid()
output = sigmoid(input_tensor)
print(output)
```

Normalmente, `nn.Sigmoid()` se agrega como el último paso en `nn.Sequential()`, transformando automáticamente la salida de la capa lineal final.

```{python}
model = nn.Sequential(
  nn.Linear(6, 4), # Primera capa lineal 
  nn.Linear(4, 1), # Segunda capa lineal
  nn.Sigmoid()     # Función de activación
)
```

Curiosamente, una red neuronal con solo capas lineales y una activación sigmoidea se comporta como una **Regresión Logística.** Más adelante agregaremos más capas y activaciones para comprender realmente el verdadero potencial del Deep Learning.

### Función Softmax

Usamos softmax, otra función de activación popular, para clasificación multiclase que implica más de dos etiquetas de clase.

Digamos que tenemos tres clases:

1.  Pajaro o Bird (0)

2.  Mamífero o Mammal (1)

3.  Reptil o Reptile (2)

![](img/fig25.png){fig-align="center" width="400"}

En esta red, Softmax toma una dimensión tridimensional, salida de preactivación y genera una salida de la misma forma, una por tres.

La salida es una distribución de probabilidad:

-   Por cada elemento está entre cero y uno, y

-   los valores suman uno.

![](img/fig26.png){fig-align="center" width="350"}

Aquí, la predicción es para la segunda clase, mamíferos, que tiene la probabilidad más alta 0.842.

![](img/fig27.png){fig-align="center" width="350"}

En PyTorch, usamos `nn.Softmax()`

```{python}
import torch
import torch.nn as nn

input_tensor = torch.tensor(
  [[4.3, 6.1, 2.3]]
)

probabilities = nn.Softmax(dim=-1)
# dim = -1 indica que softmax se aplica a la última dimensión de input_tensor
output_tensor = probabilities(input_tensor)
print(output_tensor)
```

Similar a sigmoide, softmax puede ser la última capa en nn.Sequential. \

## Paso hacia adelante

Hemos explorado tensores, redes pequeñas y funciones de activación. Ahora profundicemos en la generación de predicciones.

Este proceso se llama **"ejecutar un paso hacia adelante"** a través de una red.

### Qué es una paso hacia adelante (Forward Pass)?

Es cuando los datos de entrada fluyen a través de una red neuronal en dirección hacia adelante, para producir resultados o predicciones, pasa a través de cada capa de red.

![](img/fig28.png){fig-align="center" width="350"}

Los calculos transforman los datos en nuevas representaciones en cada capa, que pasa a la siguiente capa hasta que se produce el resultado final.

El propósito del paso hacia adelante es pasar datos de entrada a través de la red y producir predicciones o resultados basados en los parámetros aprendidos del modelo, también conocidos como pesos y sesgos.

Este proceso es esencial tanto para el entrenamiento como para realizar nuevas predicciones.

El resultado final puede ser clasificaciones binarias, clasificaciones multiclase o predicciones numéricas (regresiones).

![](img/fig29.png){fig-align="center" width="400"}

Veremos un ejemplo de cada uno.

Digamos que tenemos datos de entrada de cinco animales, con seís características o neuronas por punto de datos.

```{python}
input_data = torch.tensor(
  [[-0.4421, 1.5207, 2.0607, -0.3647, 0.4691, 0.0946],
  [-0.9155, -0.0475, -1.3645, -0.6336, -1.9520, -0.3398],
  [0.7406, 1.6763, -0.8511, 0.2432, 0.1123, -0.0633],
  [-1.6630, -0.0718, -0.1285, 0.5396, -0.0288, -0.8622],
  [-0.7413, 1.7920, -0.0883, -0.6685, 0.4745, -0.4245]]
)
```

Creamos una pequeña red con dos capas lineales y una función de activación sigmoidea en secuencia.

```{python}
import torch
import torch.nn as nn
model = nn.Sequential(
  nn.Linear(6, 4),
  nn.Linear(4, 1),
  nn.Sigmoid()
)
```

-   La primera capa toma seis características como entrada, genera cuatro.

-   La segunda capa procesa esto para obtener una probailidad final.

El resultado de nuestra clasificación binaria es una única probabilidad entre cero y uno para cada uno de nuestros cinco animales.

```{python}
output = model(input_data)
print(output)
```

Recuerde que comúnmente utilizamos un umbral de 0.5 para convertirlos en etiquetaas de 0 y 1, es decir:

-   Class = 1 para $output \geq 0.5$

-   Class = 0 para $output \leq 0.5$

Esta salida no será significativa hasta que usemos retropropagación para actualizar los pesos y sesgos de las capas. Hablaremos más sobre esto más adelante.

### Clasificación Multi-Class: Forward Pass

El modelo sería similar si quisiéramos ejecutar una clasificación de múltiples clases.

Digamos que estamos prediciendo tres clases: *mamíferos (Class 1), aves (Class 2) o reptiles (Class 3).*

Específicamos que nuestro modelo tiene tres clases, estableciendo este valor como la dimensión de salida de la última capa lineal.

```{python}
n_classes = 3
model = nn.Sequential(
  nn.Linear(6, 4),
  nn.Linear(4, n_classes),
  nn.Softmax(dim=-1)
)

```

Usamos Softmax en lugar de Sigmoid, con $dim = -1$ para indicar los 5 animales. Los anímales tiene la misma última dimensión que la salida de la última capa lineal.

```{python}
output = model(input_data)
print(output.shape)
```

Utilizando la misma entrada que antes, la forma de salida es $5\times 3$.

```{python}
print(output)
```

Note que cuando imprimimos la salida, cada fila representa las probabilidades de tres clases, que suman uno. La etiqueta prevista para cada fila se asigna a la clase con la mayor probabilidad.

En nuestro ejemplo, todas las filas son mamíferos.

### Regresión: Forward Pass

El último modelo que analizaremos es la regresión: predecir valores numéricos continuos.

Ahora usaremos las mismos datos para predecir el peso de los animales en función de sus propiedades.

```{python}
model = nn.Sequential(
  nn.Linear(6, 4), 
  nn.Linear(4, 1)
)

output = model(input_data)
print(output)
```

Esta vez no hay función de activación al final, y la última dimensión de la última capa lineal devuelve una salida con una característica.

Las dimensiones de salida son $5\times 1$: cinco valores continuos, uno para cada fila.

## Funciones de Pérdida para Evaluar las Predicciones del Modelo 

Hemos generado predicciones ejecutando un paso hacia adelante, el siguiente paso es ver qué tan buenas son nuestras predicciones en comparación con los valores reales.

#### Función de pérdida

La función de pérdida, otro componente de las redes neuronales, nos dicen qué tan bueno es nuestro modelo para hacer predicciones durante el entrenamiento.

Toma una predicción del modelo $(\hat{y})$ y una etiqueta verdadera $y$, o dato real, y genera un dato flotante, tal como se puede apreciar en el siguiente esquema

![](img/fig30.png){fig-align="center" width="800"}

Utilicemos nuestra multiclase

| Hair | Feathers | Eggs | Milk | Fins | Legs | Tail | Domestic | Catsize | Class |
|------|----------|------|------|------|------|------|----------|---------|-------|
| 1    | 0        | 0    | 1    | 0    | 4    | 0    | 0        | 1       | 0     |

modelo de clasificación que predice si un animal es un mamífero (0), ave (1) o reptil (2).

-   Si nuestro modelo predice que la clase es igual a cero, es correcto y el valor de la pérdida será bajo.

-   Una predicción incorrecta haría que el valor de la pérdida fuera alto.

-   Nuestro objetivo es minimizar las pérdidas.

#### Calculo de la pérdida 

La pérdida se calcula utilizando una función de pérdida, $F$, que toma el dato real y el predicho, es decir,

$$
Loss = F(y, \hat{y})
$$

-   En nuestro ejemplo de los animales, los valores posibles para nuestra verdadera clase de $y$ son los n[úmeros enteros 0, 1 o 2, es decir,]{.underline} $y \in \{0, 1 , 2\}$.

-   $\hat{y}$ es un tensor con las mismas dimensiones que el número de clases $N$, es decir, $\hat{y}\in \{-5.2, 4.6, 0.8\}$. Si $N=3$ entonces la salidad softmax es un tensor de forma $1\times 3$.

#### Codificación one-hot

Usamos codificación one-hot para convertir un entero $y$ en un tensor de ceros y unos para que podamos comparar para evaluar el rendimiento del modelo.

![Figura 1](img/fig31.png){fig-align="center" width="300"}

Por ejemplo, si $y=0$ con tres clases, la forma codificada es 1, 0, 0 como se aprecia en **Figura 1.**

Podemos importar `torch.nn.functional` como `F` para evitar la codificación one-hot manual.

```{python}
import torch.nn.functional as F

print(F.one_hot(torch.tensor(0), num_classes = 3))
```

En el primer ejemplo, la verdad fundamental es cero (la primera clase). Tenemos 3 clases, por lo que la función genera un tensor de tres elementos con uno en la primera posición y ceros en el resto.

```{python}
print(F.one_hot(torch.tensor(1), num_classes = 3))
```

Notemos ahora que si $y=1$ (la segunda clase), el tensor de salida tiene un uno en la segunda posición y ceros en caso contrario.

```{python}
print(F.one_hot(torch.tensor(2), num_classes = 3))
```

Por último, si $y=2$ (tercera clase), el tensor de salida tiene un uno en la última posición y ceros en el resto de los casos.

### Función de Pérdida Cross Entropy en PyTorch

Una vez completada la codificación, podemos pasarla junto con nuestras predicciones a una función de pérdida. Lo que almacenaríamos será el tensor de *"puntuaciones"*.

```{python}
from torch.nn import CrossEntropyLoss

scores = torch.tensor([-5.2, 4.6, 0.8])
one_hot_target = torch.tensor([1,0,0])
```

La función de pérdida más comunmente utilizada para la clasificaci´øn es la pérdida de entropía cruzada.

Comencemos definiendo nuestra función de pérdida como *"criterio".* Luego le pasamos el método `.double()` del tensor de puntuaciones y del tensor `one_hot_target.`

```{python}
criterion = CrossEntropyLoss()
print(criterion(scores.double(), one_hot_target.double()))
```

Esto garantiza que los tensores estén en el formato correcto para la función de pérdida. La salida es el valor de pérdida calculado.

En resumen, la función de pérdida toma como entrada el tensor de puntuaciones, que es el modelo, predice antes de la función softmax final y la etiqueta de verdad codificada one-hot. Emite un único flotante, la pérdida de esa muestra.

![](img/fig32.png){fig-align="center" width="550"}

Recordemos que nuestro objetivo es minimizar esa pérdida.

## Utilizar derivadas para Actualizar los Parámetros del Modelo 

Veamos ahora cómo podemos minímizar la pérdida. Sabemos que un modelo predice mal cuando la pérdida es alta. Podemos utilizar derivadas o gradientes para minimizar esta pérdida.

![](img/fig33.png){fig-align="center" width="300"}

Imaginemos la función de pérdida como un valle. La derivada representa la pendiente, es decir qué tan pronunciada sube o baja la curva.

-   Las pendientes pronunciadas, mostradas con flechas rojas, indican derivadas altas y pesos grandes.

-   Las pendientes más suaves, representadas por flechas verdes, tienen derivadas pequeñas y pesos más pequeños.

-   En el fondo del valle, mostrado por la flecha azul, la pendiente es plana y la derivada es cero. **Este punto es el mínimo de la función de pérdida que pretendemos alcanzar.**

### Funciones Convexas y No-Convexas 

Las funciones convexas tienen un mínimo global.

![](img/fig34.png){fig-align="center" width="1000"}

Las funciones no convexas, como las funciones de pérdida, tienen múltiples mínimos locales, donde el valor es inferior al de los puntos cercanos pero no el más bajo en general.

Al minimizar las funciones de pérdida, nuestro objetivo es localizar el mínimo global cuando $x$ es aproximadamente uno.

### Conexión de derivadas y entrenamiento de modelos 

Durante el entrenamiento, ejecutamos un ***paso hacia adelante*** en las características y calculamos la pérdida comparando las predicciones con el valor objetivo.

![](img/fig38.png){fig-align="center" width="500"}

Recuerde que los ***pesos*** y ***sesgos*** de las capas se inicializan aleatoriamente cuando se crea un modelo. Los actualizamos durante el entrenamiento mediante un ***paso hacia atrás*** o ***retropropogación.***

En el Deep Learning, **las derivadas se conocen como gradientes.**

![](img/fig39.png){fig-align="center" width="600"}

Calculamos los gradientes de la función de pérdida y los usamos para actualizar los parámetros del modelo. Incluyendo pesos y sesgos, con retropropagación, repitiendo hasta que las capas esten sintonizadas.

### Backpropagation (Retropropagación)

Durante la retropropagación, si consideramos una red de tres capas lineales:

-   podemos calcular gradientes de pérdida locales con respecto a $L_2$

-   Usamos $L_2$ para calcular el gradiente $L_1$

-   Y repetimos hasta llegar a la capa inicial $L_0$.

![](img/fig40.png){fig-align="center" width="300"}

Veamos esto con PyTorch:

```{bash}
model = nn.Sequential(nn.Linear(16, 8),
nn.Linear(8, 4),
nn.Linear(4, 2))
prediction = model(sample)

criterion = CrossEntropyLoss()
loss = criterion(prediction, target)
loss.backward
```

Después de ejecutar un paso hacia adelante, definimos una función de pérdida, aquí `CrossEntropyLoss()` y úselo para comparar predicciones con valores objetivo.

Usando `.backward()`, calculamos gradientes basados en esta pérdida, que se almacenan en los atributos `.grad` de los pesos y `.bias` de los sesgos de cada capa.

```{bash}
model[0].weight.grad
model[0].bias.grad
model[1].weight.grad
model[1].bias.grad
model[2].weight.grad
model[2].bias.grad
```

Cada capa del modelo se puede indexar comenzando desde cero para acceder a sus pesos, sesgos y gradientes.

### Actualizar Manualmente los Parámetros del Modelo 

Para actualizar manualmente los parámetros del modelo, accedemos al gradiente de cada capa.

```{bash}
# Tasa de aprendizaje tipicamente pequeña
lr = 0.001

# updater the pesos
weight = model[0].weight
weight_grad = model[0].weight.grad

# update de sesgos 
bias = model[0].bias
bias_grad = model[0].bias.grad 
```

luego multiplicamos por la tasa de aprendizaje y restamos este producto del peso.

```{bash}
bias = bias - lr*bias_grad 
```

La tasa de aprendizaje es otro parámetros ajustable. Discutiremos esto y el ciclo de entranamiento más adelante en este documento.

### Gradiente Descendente 

-   Utilizamos un mecanismo llamado *"gradiente desendiente"* para encontrar el mínimo global de las funciones de pérdida.

-   PyTorch simplifica esto con optimizadores, como el descenso de gradiente estocástico (SGD).

```{python}
import torch.optim as optim

# Creamos el optimizador
optimizer = optim.SGD(model.parameters(), lr = 0.001)
```

-   Usamos `optim` para instanciar `SGD.`

-   `.parameters()` devuelve un iterable de todos los parámetros del modelo, que pasamos al optimizador.

-   Aquí utilizamos una tasa de aprendizaje estándar, "lr".

El optimizador calcula automáticamente los gradientes y actualiza los parámetros del modelo con `.step()`

```{python}
optimizer.step()
```

# Entrenar una red neuronal con PyTorch

Ahora que hemos visto los componentes clave de una red neuronal, entrenaremos una utilizando un bucle de entrenamiento. Exploraremos posibles problemas, como la fuga de gradiente, y aprenderemos estrategías para resolverlos, como funciones de activación alternativas y el análisis de la tasa de aprendizaje.

### Inmmersión profunda en la carga de datos 

El manejo eficiente de datos es clave para entrenar modelos de aprendizaje profundo (Deep Learnig)

| animal_name | hair | feathers | eggs | milk | predator | legs | tail | type |
|-------------|------|----------|------|------|----------|------|------|------|
| sparrow     | 0    | 1        | 1    | 0    | 0        | 2    | 1    | 0    |
| eagle       | 0    | 1        | 1    | 0    | 1        | 2    | 1    | 0    |
| cat         | 1    | 0        | 0    | 1    | 1        | 4    | 1    | 1    |
| dog         | 1    | 0        | 0    | 1    | 0        | 4    | 1    | 1    |
| lizard      | 0    | 0        | 1    | 0    | 1        | 4    | 1    | 2    |

Nuestros datos de clasificación de animales estan en un archivo csv y se pueden cargar utilizando `pd.read_csv()`.

```{python}
import pandas as pd
import numpy as np
animals = pd.read_csv('animal_dataset.csv', sep = ";")
```

Usaremos pelo, plumas, huevos, leche, depredador, patas y cola como características para predecir todo el tipo de animal.

-   La columna **animal_name** no es necesaria ya que los nombres no determinan la clasificación.

-   Tenga en cuenta que la columna **type** tiene tres categorías: ave (0), mamífero (1) y reptil (2).

```{python}
features = animals.iloc[:, 1:-1]
X = features.to_numpy()
print(X)
```

-   Usaremos `.iloc` para seleccionar todas las columnas excepto la primera y la (animal_name) última (type), lo que nos dará nuestras características de entrada.

-   Estos se convierten en una matriz NumPy (X), para un manejo más sencillo con PyTorch.

De manera similar, podemos extraer la última columna (type) y almacenarla como una matriz de nuestros valores objetivo, que representan las etiquetas de clase para cada animal, a esto lo llamaremos **y**.

```{python}
target = animals.iloc[:, -1]
y = target.to_numpy()
print(y)
```

### TensorDataset

Usaremos TensorDataset para preparar datos para los modelos de PyTorch.

```{python}
import torch 
from torch.utils.data import TensorDataset

```

Esto nos permite almacenar nuestras características (X) y etiquetas destino (y) como tensores, lo que hace que sean fáciles de administrar.

1.  Convertimos $X$ e $y$ en tensores usando el método tensor de PyTorch y los pasamos a TensorDataset

    ```{python}
    dataset = TensorDataset(torch.tensor(X), torch.tensor(y))
    ```

2.  Para acceder a una muestra individual, utilizamos la indexación de corchetes.

    ```{python}
    input_sample, label_sample = dataset[0]
    print('input sample:', input_sample)
    print('input_sample:', label_sample)
    ```

    \
    \

## Escribir nuestro primer bucle de entrenamiento

Ahora que ya tenemos los componentes principales para entrenar un modelo de aprendizaje profundo con PyTorch.

### Entrenando una Red Neuronal 

Una vez que creamos un modelo, elegimos una función de pérdida, definimos un conjunto de datos y configuramos un optimizador, estamos listos para entrenar. Esto implica recorrer el conjunto de datos, calcular la pérdida, calcular gradientes y actualizar los parámetros del modelo. Este proceso, es llamado **bucle de entrenamiento**, se repite varias veces.

Un bucle de entrenamiento permite una mayor flexibilidad y control, dándonos la opción de personalizar diferentes elementos.

Trabajaremos con un conjunto de datos de salarios de científicos de datos para ver esto en acción.

| experience_level | employment_type | remote_ratio | company_size | salary_in_usd |
|------------------|-----------------|--------------|--------------|---------------|
| 0                | 0               | 0.5          | 1            | 0.036         |
| 1                | 0               | 1.0          | 2            | 0.133         |
| 2                | 0               | 0.0          | 1            | 0.234         |
| 1                | 0               | 1.0          | 0            | 0.076         |
| 2                | 0               | 1.0          | 1            | 0.170         |

-   Las características son categóricas y el objetivo es el salario en dólares (salary_in_usd), ya normalizado. Dado que el objetivo es un valor continuo, este es un problema de regresión.

-   Para la regresión, utilizaremos una capa lineal como salida final en lugar de softmax o sigomoide.

-   Además, aplicaremos una función de pérdida específica de regresión, ya que la entropía cruzada solo se utiliza para tareas de clasificación.

#### Mean Squared Error Loss

Podemos utilizar la pérdida de error cuadrático medio (MSE) para problemas de regresión. La pérdida de MSE es la media de la diferencia al cuadrado entre predicciones y el dato real o verdad fundamental, como se muestra en esta implementación en Python:

```{python}
def mean_squared_loss(prediction, target):
  return np.mean((prediction - target)**2)
```

En PyTorch, utilizamos la función `nn.MSELoss` como criterio.

```{bash}
criterion = nn.MSELoss()
loss = criterion(prediction, target)
```

Tenga en cuenta que tanto las predicciones como los objetivos deben ser tensores flotantes.

Pongamos todo junto ahora, tenemos dos matrices NumPy, "características" y "objetivo", que tienen nuestros datos y etiquetas.

```{python}
data = pd.read_csv("salary_datascince.csv", sep = ";")
data
```

```{python}
features = data.iloc[:, :-1]
X = features.to_numpy()
print(X)
```

```{python}
target = data.iloc[:, -1]
y = target.to_numpy()
print(y)
```

```{python}
from torch.utils.data import TensorDataset, DataLoader

dataset = TensorDataset(torch.tensor(X),
torch.tensor(y))

dataloader = DataLoader(dataset, batch_size = 4, shuffle = True)
```

Ahora podemos cargar nuestro conjunto de datos en la clase `DataLoader()` para habilitar el procesamiento por lotes.

-   Aquí utilizamos un tamaño de lote pequeño de cuatro, pero la selección del tamaño de lote es personalizable dependiendo del caso de uso.

A continuación creamos nuestro modelo, este conjunto de datos tiene cuatro características de entrada y un destino (salida).

```{python}
model = nn.Sequential(nn.Linear(4, 2), 
nn.Linear(2, 1))
```

No necesitaremos codificación one-hot ya que se trata de un problema de regresión.

Finalmente, creamos el criterio de pérdida MSE y el optimizador, con una taza de aprendizaje predeterminada para la mayoría de los problemas de deep learning.

```{python}
criterio = nn.MSELoss()
optimizer = optim.SGD(model.parameters(), lr = 0.001)
```

Ahora podemos recorrer el conjunto de datos varias veces:

-   Recorrer todo el conjunto de datos una vez se denomina época y entrenamos en múltiples época, indicadas por num_epochs. Para cada época, recorremos el cargador de datos. Cada iteración del cargador de datos proporciona un lote de muestras, que vimos anteriormente. Antes del pase hacia adelante , establecemos los gradientes a cero usando `optimizer.zero_grad()`, porque el optimizador almacena gradientes de pasos anteriores de manera predeterminada, obtenemos características y objetivos de cada muestra del cargador de datos. Utilizamos las características para el paso hacia adelante del modelo y utilizamos el objetivo para el cálculo de la pérdida y finalmente, utilizamos el optimizador para actualizar los parámetros del modelo.

```{bash}
for epoch in range(num_epochs):
  for data in dataloader: 
    optimizer.zero_grad()
    feature, target = data 
    pred = model(feature)
    loss = criterion(pred, target)
    loss.backward()
    optimizer.step()
    
```

## Funciones de Activación ReLU

Hemos visto como las funciones de activación introducen no linealidad para ayudar a las redes neuronales a aprender patrones complejos y hemos aprendido sobre los gradientes y su papel dentro del ciclo de entrenamiento.

A veces, las funciones de activación pueden reducir demasiado los gradientes, lo que hace que el entrenamiento sea ineficiente.

Hasta ahora hemos trabajado con dos funciones de activación: **sigmoidea** y **softmax,** que normalmente se utilizan en la capa final de un modelo.

![](img/fig41.png){fig-align="center" width="900"}

### Limitaciones de Sigmoid y Softmax

Comenzaremos por comprender algunas de las limitaciones de la función sigmoidea.

![](img/fig42.png){fig-align="center" width="300"}

-   Las salidas de sigmoid están limitadas entre 0 y 1, lo que significa que para cualquier entrada, la salida siempre estará dentro de este rango.

-   Sigmoid podría usarse en cualquier punto de una red. Sin embargo, los gradientes de la sigmoide, que se muestran en naranja, son muy pequeños para valores grandes y pequeños de $x$. Este fenómeno se llama saturación. Durante la retropropagación, esto se vuelve problemático porque cada gradiente depende del anterior. Cuando los gradientes son extremadamente pequeños, no logran actualizar los pesos de manera efectiva.

-   Este problema se conoce como el problema de los gradientes avanescentes y puede dificultar mucho el entrenamiento de redes profundas.

La **función softmax**, que también produce salidas acotadas entre 0 y 1, sufre saturación de manera similar.

Por tanto, ambas funciones de activación no son ideales para capas ocultas y es mejor utilizarlas solo en la última capa.

### ReLU

Descubriremos dos funciones de activación ampliamente utilizadas, diseñadas para su uso entre capas lineales o en capas ocultas.

![Función ReLU](img/fig43.png){fig-align="center" width="300"}

-   $f(x) = \max(x,0)$ aquí está la unidad lineal rectificada o ReLU. ReLU genera el valor máximo entre su entrada y cero. Como se muestra en el gráfico.

-   Para **entradas positivas,** la salida es igual a la entrada.

-   Para **entradas negativas,** la salida es cero.

Esta función no tiene límite superior y sus gradientes no se aproximan a cero. Para valores grandes de $x$, lo que ayuda a superar el problema de los gradientes que desaparecen.

En PyTorch, ReLU se puede utilizar a través del módulo torch.nn

```{python}
relu = nn.ReLU()
```

### Leaky ReLU (ReLU con fugas) 

La ReLU con fugas es una variación de la función ReLU. Para entradas positivas, se comporta exactamente como ReLU.

![Leaky ReLU](img/fig44.png){fig-align="center" width="300"}

-   Para **entradas positivas**, se comporta exactamente como ReLU.

-   Para **entradas negativas**, multiplica la entrada por un coeficiente pequeño (predeterminado a 0.01 en PyTorch).

Esto garantiza que los gradientes para entradas negativas permanezcan distintos de cero, lo que evita que las neuronas dejen de aprender por completo, lo que puede suceder con ReLU estándar.

En PyTorch, la función ReLU con fugas se implementa utilizando el módulo torch.nn.

```{python}
leaky_relu = nn.LeakyReLU(
  negative_slope = 0.05
)
```

El parámetro **negative_slope** controla el coeficiente aplicado a las entradas negativas.

## Tasa de Aprendizaje 

Hemos hablado anteriormente sobre la tasa de aprendizaje, pero llego el momento de que profundicemos más.

### Actualización de Pesos con SGD

-   Entrenar una red neuronal significa = resolver una optimización. El problema planteado es minimizar la función de pérdida y ajustando los parámetros del modelo. \
    \
    - Para ello utilizamos un algoritmo llamado **descenso de gradiente estocástico, o SGD**, implementado en PyTorch.

    ```{python}
    sgd = optim.SGD(model.parameters(), lr = 0.01, momentum = 0.95)
    ```

    Recuerde que este es el optimizador que usamos para encontrar el mínimo global de las funciones de pérdida.

-   El optimizador toma los parámetros del modelo junto con dos argumentos claves: \
    \
    - **Tasa de aprendizaje:** controla el tamaño del paso de las actualizaciones. \
    \
    - momentum: añade inercia para ayudar al optimizador a moverse con suavidad y evitar atascarse. \

### Impaco de learning rate: tasa de aprendizaje óptima

Comprender su impacto nos ayuda a optimizar la eficiencia.

Intentemos encontrar el mínimo de una función en forma de U.

![](img/fig45.png){fig-align="center" width="500"}

Comenzamos en $x = -2$ y ejecutamos el optimizador SGD durante diez pasos. Luego de estos pasos observamos que el optimizador está cerca del mínimo.

También podemos observar que a medida que nos acercamos al mínimo, el tamaño del paso disminuye gradualmente. Esto sucede porque el tamaño del paso es el gradiente multiplicado por la tasa de aprendizaje. Como la función es menos pronunciada cerca de cero, el gradiente, y por tanto el tamaño del paso, se hace más pequeño.

### Impacto de learning rate tasa de aprendizaje pequeña

![](img/fig46.png){fig-align="center" width="600"}

Sin embargo, si utilizamos el mismo algoritmo para un aprendizaje, si reducimos la velocidad diez veces, nos damos cuenta de que todavía estamos lejos del mínimo de la función después de diez pasos. El optimizador tardará mucho más tiempo en encontrar el mínimo de la función.

### Impacto learning rate: tasa de aprendizaje alto 

Si utilizamos un valor alto para la tasa de aprendizaje, observamos que el optimizador no puede encontrar el mínimo y rebota de un lado a otro en ambos lados de la función.

![](img/fig47.png){fig-align="center" width="600"}

Recuerde que las funciones de pérdida no son convexas.

![](img/fig48.png){fig-align="center" width="800"}

Uno de los desafíos al intentar encontrar el mínimo de una función no convexa es quedarse atrapado en un mínimo local.

### Sin momentum 

-   $lr = 0.01$ $momentum = 0$, ejecutemos nuestro optimizador durante 100 pasos con un momento nulo en esta función no convexa para $x = -1.23$ y $y = -0.14$. \
    \
    ![](img/fig49.png){width="500"}

    -   Vemos que el optimizador se queda atascado en esta primera caída de la función, que no es su mínimo global.

-   Sin embargo, al utilizar lr = 0.01, momentum = 0.9 ejecutando nuestro optimizador durante 100 pasos para $x = 0.92$ y $y = -2.04$. Podemos encontrar el mínimo de la función. \
    \
    ![](img/fig50.png){width="500"}

Este parámetro proporciona impulso al optimizador permitiendole superar caídas locales, como se muestra en la figura previa.

El impulso (momentum) mantiene el tamaño del paso grande cuando los pasos anteriores también fueron grandes, incluso si el gradiente actual es pequeño.

### Summary

Enr esumen, dos parámetros optimizadores clave impactan el entrenamiento: la tasa de aprendizaje (learning rate) y el impulso (momentum):

| Learning Rate | Momentum |
|----|----|
| Controla el tamaño del paso | Controla la inercia |
| Valor de tasa alta -\> bajo rendimiento | Ayuda a escapar de mínimos locales |
| Valor de tasa bajo -\> entrenamiento lento | Demasiado pequeño -\> el optimizador se queda atascado |
| Valores tipicos varían de 0.01 a 0.0001. | Rango típico: 0.85 a 0.99 |

**El `momentum` y `learning` rate son críticos par el entrenamiento de tu red neuronal. Una buena regla general es comenzar con una learning rate de 0.001 y un momentum de 0.95.**

# Evaluación y Mejora de los Modelos

Entrenar un modelo de aprendizaje profundo es un arte, y para asegurarnos de que nuestro modelo se entrene correctamente, necesitamos hacer un seguimiento de ciertos parámetros durante el entrenamiento, como la pérdida o la exactitud. Aprenderemos a calcular estas métricas y a reducir el sobreajuste.
