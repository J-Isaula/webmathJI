---
title: "Deep Learning"
subtitle: "PyTorch"
author: "Juan Isaula"
date: "2025-07-01"
categories: [Python, PyTorch]
image: "fondo.webp"
---

El Deep Learning está en todas partes, desde las cámaras de los smartphones hasta los asistentes de vos o los vehículos autónomos. En este curso, descubriras esta potente tecnología y aprenderás a aprovecharla con `PyTorch`, una de las bibliotecas de aprendizaje profundo más populares. Al finalizar tu recorrido por este documento, serás capaz de aprovechar PyTorch para resolver problemas de clasificación y regresión utilizando el aprendizaje profundo.

# Introducción a PyTorch (biblioteca de Deep Learning)

Antes de comenzar a crear modelos complejos, te haré conocer PyTorch, un librería de aprendizaje profundo. Aprenderás a manipular tensores, crear estructuras de datos de PyTorch y construir tu primera red neuronal en PyTorch con capas lineales.

El Deep Learning impulsa muchas innovaciones recientes y emocionantes, tales como la *traducción de idiomas*, *coches autónomos*, *diagnósticos médicos y chatbots.*

![](img/fig1.png){fig-align="center" width="600"}

## Qué es Deep Learning?

![](img/fig2.png){fig-align="center" width="200"}

Deep Learning (aprendizaje profundo) es un subconjunto del aprendizaje automático (machine learning). La estructura del modelo es una red de entradas (input), capas ocultas (hidden layers) y salidas (output), como se muestra en la siguiente imagen:

![](img/fig3.png){fig-align="center" width="200"}

Como apreciamos en la figura, una red puede tener una o muchas capas ocultas

![](img/fig4.png){fig-align="center" width="250"}

La intuición original detrás del aprendizaje profundo era crear modelos inspirados en el cerebro humano, sobre todo por cómo aprende el cerebro humano: a través de células interconectadas llamadas neuronas. Es por esto que llamamos a los modelos de aprendizaje profundo **`Redes Neuronales`**.

![](img/fig5.png){fig-align="center" width="150"}

Estas estructuras de modelos en capas requieren muchos más datos en comparación con otros modelos de aprendizaje automático para derivar patrones. Generalmente hablamos de al menos cientos de miles de puntos de datos.

## PyTorch: un framework del deep learning

![](img/fig6.png){fig-align="center" width="180"}

Si bien existen varios framework y paquetes para implementar el aprendizaje profundo en cuanto a algoritmos, nos centraremos en PyTorch, uno de los frameworks más populares y mejor mantenidos. *PyTorch fue desarrollado originalmente por Meta IA como parte del laboratorio de investigación de inteligencia artificial de Facebook antes de que pasara a depender de la fundación Linux.*

Está diseñado para ser intuitivo y fácil de usar, compartiendo muchas similitudes con la biblioteca de Python NumPy.

#### PyTorch Tensors 

Podemos importar el módulo PyTorch llamando a

```{python}
import torch
```

-   La estructura de datos fundamental en PyTorch es un tensor, que es similar a una matriz.

-   Puede soportar muchas operaciones matemáticas y constituye un componente básico para nuestras redes neuronales.

-   Se pueden crear tensores a partir de listas de Python o matrices NumPy utilizando la clase `torch.tensor()` esta clase convierte los datos a un formato compatible para el aprendizaje profundo.

```{python}
mi_lista = [[1,2,3], [4,5,6]]
tensor = torch.tensor(mi_lista)
print(tensor)
```

### Atributos de los Tensores

Podemos llamar a `tensor.shape` para mostrar la forma de nuestro objeto recién creado.

```{python}
print(tensor.shape)
```

Y `tensor.dtype()` para mostrar su tipo de datos, aquí un entero de 64 bits.

```{python}
print(tensor.dtype)
```

Verificar la forma y el tipo de datos garantiza que los tensores se alineen correctamente con nuestro modelo y tarea, y puede ayudarnos en caso de depuración.

#### Operaciones con Tensores 

Se pueden sumar o restar tensores de PyTorch, siempre que sus formas sean compatibles.

```{python}
a = torch.tensor([[1,1], [2,2]])
b = torch.tensor([[2,2],[3,3]])
c = torch.tensor([[2,2,2], [3,3,5]])
```

```{python}
print(a + b)
```

Cuando las dimensiones no son compatibles, obtendremos un error.

También podemos realizar la multiplicación por elemento, lo que implica multiplicar cada elemento correspondiente.

```{python}
print(a*b)
```

También esta incluida la multiplicación de matrices, que no es más que uno forma de combinar dos matrices para crear una nueva.

```{python}
print(a @ b)
```

Detras de escena, los modelos de aprendizaje profundo realizan innumerables operaciones como la suma y multiplicación para procesar datos y aprender patrones.
